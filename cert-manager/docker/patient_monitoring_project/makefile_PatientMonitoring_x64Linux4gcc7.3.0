######################################################################
# makefile_PatientMonitoring_x64Linux4gcc7.3.0#
# (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
# RTI grants Licensee a license to use, modify, compile, and create
# derivative works of the software solely for use with RTI Connext DDS.
# Licensee may redistribute copies of the software provided that all such
# copies are subject to this license. The software is provided "as is",
# with no warranty of any type, including any warranty for fitness for
# any purpose. RTI is under no obligation to maintain or support the
# software. RTI shall not be liable for any incidental or consequential
# damages arising out of the use or inability to use the software.
#
#
# This makefile was automatically generated by RTI Code Generator (rtiddsgen)
# version 3.1.0.
#
#
# Note: This makefile is only meant to build our example applications and
#       may require alterations to build on your system.
#
# This makefile assumes that your build environment is already correctly
# configured. (For example, the correct version of your compiler and
# linker should be in your PATH.)
######################################################################

# If undefined in the environment default NDDSHOME to install dir
ifndef NDDSHOME
NDDSHOME := "/home/epotters/rti_connext_dds-6.1.0"
endif

SOURCE_DIR = 

TARGET_ARCH = x64Linux4gcc7.3.0

#TOOLSROOT = # Set the location of the toolchain
#COMPILERSYSROOT = $(TOOLSROOT)/build/tmp/sysroots/genericx86-64
#COMPILER_PATH = $(TOOLSROOT)/build/tmp/sysroots/x86_64-linux/usr/bin/x86_64-wrs-linux

ifndef COMPILER
COMPILER = $(COMPILER_PATH)$(GCC_PREFIX)g++
endif
COMPILER_FLAGS = -m64 -Wall $(ADDITIONAL_COMPILER_FLAGS) -std=c++14
ifndef LINKER
LINKER = $(COMPILER_PATH)$(GCC_PREFIX)g++
endif
LINKER_FLAGS = -m64 $(ADDITIONAL_LINKER_FLAGS)
SYSLIBS = -ldl -lm -lpthread -lrt -no-pie -rdynamic
DEFINES = -DRTI_UNIX -DRTI_LINUX -DRTI_64BIT 
ifndef DEBUG
DEBUG=0 
endif
ifeq ($(DEBUG),1)
COMPILER_FLAGS += -g -O0
LINKER_FLAGS += -g
DEBUG_SFX = d
else
DEBUG_SFX = 
endif
 
ifndef SHAREDLIB
SHAREDLIB=0
endif

ifeq ($(SHAREDLIB),1)
SHAREDLIB_SFX = 
else
SHAREDLIB_SFX = z
DEFINES += -DRTI_STATIC
endif



INCLUDES = -I. -I$(NDDSHOME)/include -I$(NDDSHOME)/include/ndds -I$(NDDSHOME)/include/ndds/hpp 
       
LIBS = -L$(NDDSHOME)/lib/$(TARGET_ARCH) \
        \
        \
        -lnddscpp2$(SHAREDLIB_SFX)$(DEBUG_SFX) -lnddsc$(SHAREDLIB_SFX)$(DEBUG_SFX) -lnddscore$(SHAREDLIB_SFX)$(DEBUG_SFX) \
        $(SYSLIBS)

CDRSOURCES    = PatientMonitoring.idl
SOURCES = $(SOURCE_DIR)PatientMonitoringPlugin.cxx $(SOURCE_DIR)PatientMonitoring.cxx
COMMONSOURCES = $(notdir $(SOURCES))

EXEC          = PatientMonitoring_subscriber PatientMonitoring_publisher
DIRECTORIES   = objs.dir objs/$(TARGET_ARCH).dir
COMMONOBJS    = $(COMMONSOURCES:%.cxx=objs/$(TARGET_ARCH)/%.o)

# We actually stick the objects in a sub directory to keep your directory clean.
$(TARGET_ARCH) : $(DIRECTORIES) $(COMMONOBJS) \
	$(EXEC:%=objs/$(TARGET_ARCH)/%.o) \
	$(EXEC:%=objs/$(TARGET_ARCH)/%)

objs/$(TARGET_ARCH)/% : objs/$(TARGET_ARCH)/%.o
	$(LINKER) $(LINKER_FLAGS) -o $@ $@.o $(COMMONOBJS) $(LIBS)

objs/$(TARGET_ARCH)/%.o : $(SOURCE_DIR)%.cxx   $(SOURCE_DIR)PatientMonitoring.hpp 
	$(COMPILER) $(COMPILER_FLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<

#
# Uncomment these lines if you want the support files regenerated when idl
# file is modified
#
#
#  $(SOURCE_DIR)PatientMonitoringPlugin.cxx $(SOURCE_DIR)PatientMonitoring.cxx \
#  $(SOURCE_DIR)PatientMonitoring.hpp $(SOURCE_DIR)PatientMonitoringPlugin.hpp $(SOURCE_DIR)application.hpp : \
#		$(SOURCE_DIR)PatientMonitoring.idl
#	$(NDDSHOME)/bin/rtiddsgen $(SOURCE_DIR)PatientMonitoring.idl -replace -language C++11
#
# Here is how we create those subdirectories automatically.
%.dir : 
	@echo "Checking directory $*"
	@if [ ! -d $* ]; then \
		echo "Making directory $*"; \
		mkdir -p $* ; \
	fi;

