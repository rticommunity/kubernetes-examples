apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-config
data:
  tcp_config.xml: |
    <?xml version="1.0"?>
    <!-- 
    Description
    XML QoS Profile for HelloWorld
    
    (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
    RTI grants Licensee a license to use, modify, compile, and create derivative
    works of the software solely for use with RTI Connext DDS. Licensee may
    redistribute copies of the software provided that all such copies are
    subject to this license. The softwaÃŸre is provided "as is", with no warranty
    of any type, including any warranty for fitness for any purpose. RTI is
    under no obligation to maintain or support the software. RTI shall not be
    liable for any incidental or consequential damages arising out of the use
    or inability to use the software.
    
    -->
    
    <dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="file:////Applications/rti_connext_dds-7.0.0/resource/schema/rti_dds_qos_profiles.xsd">
        <!-- QoS Library containing the QoS profile used in the generated example.
    
            A QoS library is a named set of QoS profiles.
        -->
        <qos_library name="qos_lib">
    
            <!-- QoS profile used to configure reliable communication between the DataWriter 
                 and DataReader created in the example code.
    
                 A QoS profile groups a set of related QoS.
            -->
          <qos_profile name="pub_profile" base_name="BuiltinQosLib::Generic.StrictReliable">
            <!-- QoS used to configure the data writer created in the example code -->                
            <datawriter_qos>
                <publication_name>
                    <name>HelloWorldDataWriter</name>
                </publication_name>
            </datawriter_qos>

            <!-- QoS used to configure the data reader created in the example code -->                
            <datareader_qos>
                <subscription_name>
                    <name>HelloWorldDataReader</name>
                </subscription_name>
            </datareader_qos>
            <domain_participant_qos>

              <transport_builtin>
                <mask>MASK_NONE</mask>
              </transport_builtin>
      
              <property>
                <value>
                  <!-- Required elements to enable the transport -->
                  <element>
                    <name>dds.transport.TCPv4.tcp1.create_function</name>
                    <value>NDDS_Transport_TCPv4_create</value>
                  </element>
                  <element>
                    <name>dds.transport.TCPv4.tcp1.parent.classid</name>
                    <value>NDDS_TRANSPORT_CLASSID_TCPV4_WAN</value>
                  </element>
                  <element>
                    <name>dds.transport.load_plugins</name>
                    <value>dds.transport.TCPv4.tcp1</value>
                  </element>
                  <element>
                    <name>dds.transport.TCPv4.tcp1.library</name>
                    <value>nddstransporttcp</value>
                  </element>
          
                  <element>
                    <name>dds.transport.TCPv4.tcp1.public_address</name>
                    <value>$(PUBLIC_PUBLISHER_IP):$(PUBLIC_PUBLISHER_PORT)</value>
                  </element>
                  <element>
                    <name>dds.transport.TCPv4.tcp1.server_bind_port</name>
                    <value>$(PUBLISHER_PORT)</value>
                  </element>
          
                  <element>
                    <name>dds.transport.TCPv4.tcp1.logging_verbosity_bitmap</name>
                    <value>0x13F</value>
                  </element>
                </value>
              </property>

              <discovery>
                <initial_peers>
                  <element>tcpv4_wan://$(PUBLIC_SUBSCRIBER_IP):$(PUBLIC_SUBSCRIBER_PORT)</element>
                </initial_peers>
              </discovery>
      
              <participant_name>
                <name>HelloWorldParticipant</name>
                <role_name>HelloWorldParticipantRole</role_name>
              </participant_name>

            </domain_participant_qos>
        </qos_profile>
    
        <qos_profile name="sub_profile" base_name="BuiltinQosLib::Generic.StrictReliable">
          <!-- QoS used to configure the data writer created in the example code -->                
          <datawriter_qos>
              <publication_name>
                  <name>HelloWorldDataWriter</name>
              </publication_name>
          </datawriter_qos>

          <!-- QoS used to configure the data reader created in the example code -->                
          <datareader_qos>
              <subscription_name>
                  <name>HelloWorldDataReader</name>
              </subscription_name>
          </datareader_qos>
        
          <domain_participant_qos>
              <!--
              The participant name, if it is set, will be displayed in the
              RTI tools, making it easier for you to tell one
              application from another when you're debugging.
              -->
  
            <transport_builtin>
              <mask>MASK_NONE</mask>
            </transport_builtin>
    
            <property>
              <value>
                <!-- Required elements to enable the transport -->
                <element>
                  <name>dds.transport.TCPv4.tcp1.create_function</name>
                  <value>NDDS_Transport_TCPv4_create</value>
                </element>
                <element>
                  <name>dds.transport.TCPv4.tcp1.parent.classid</name>
                  <value>NDDS_TRANSPORT_CLASSID_TCPV4_WAN</value>
                </element>
                <element>
                  <name>dds.transport.load_plugins</name>
                  <value>dds.transport.TCPv4.tcp1</value>
                </element>
                <element>
                  <name>dds.transport.TCPv4.tcp1.library</name>
                  <value>nddstransporttcp</value>
                </element>
        
                <element>
                  <name>dds.transport.TCPv4.tcp1.logging_verbosity_bitmap</name>
                  <value>0x13F</value>
                </element>
        
                <element>
                  <name>dds.transport.TCPv4.tcp1.public_address</name>
                  <value>$(PUBLIC_SUBSCRIBER_IP):$(PUBLIC_SUBSCRIBER_PORT)</value>
                </element>
                <element>
                  <name>dds.transport.TCPv4.tcp1.server_bind_port</name>
                  <value>$(SUBSCRIBER_PORT)</value>
                </element>
        
              </value>
            </property>
    
            <discovery>
              <initial_peers>
                <element>tcpv4_wan://$(PUBLIC_PUBLISHER_IP):$(PUBLIC_PUBLISHER_PORT)</element>
              </initial_peers>
            </discovery>
    		
            <participant_name>
                <name>HelloWorldParticipant</name>
                <role_name>HelloWorldParticipantRole</role_name>
            </participant_name>
    
          </domain_participant_qos>
        </qos_profile>
      </qos_library>
    </dds>
